name: SDK PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'packages/sdk/**'
      - '.github/workflows/sdk-pr.yml'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  quick-check:
    name: Quick Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            pnpm install --frozen-lockfile
          else
            pnpm install --no-frozen-lockfile
          fi

      - name: Run linting
        id: lint
        run: pnpm --filter codefetch-sdk lint
        continue-on-error: true

      - name: Run type checking  
        id: typecheck
        run: pnpm --filter codefetch-sdk test:types
        continue-on-error: true

      - name: Run tests
        id: test
        run: pnpm --filter codefetch-sdk test:coverage
        env:
          CI: true
        continue-on-error: true

      - name: Build SDK
        id: build
        run: |
          pnpm --filter codefetch-sdk build
          pnpm --filter codefetch-sdk build:worker
        continue-on-error: true

      - name: Comment PR with test results
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('SDK Test Results')
              );
              
              const getStatusEmoji = (outcome) => {
                return outcome === 'success' ? '✅' : '❌';
              };
              
              const lintStatus = '${{ steps.lint.outcome }}';
              const typecheckStatus = '${{ steps.typecheck.outcome }}';
              const testStatus = '${{ steps.test.outcome }}';
              const buildStatus = '${{ steps.build.outcome }}';
              
              const allPassed = lintStatus === 'success' && 
                               typecheckStatus === 'success' && 
                               testStatus === 'success' && 
                               buildStatus === 'success';
              
              const body = `## 🧪 SDK Test Results
              
              ${allPassed ? '✅ **All checks passed!**' : '❌ **Some checks failed**'}
              
              | Check | Status |
              |-------|--------|
              | Linting | ${getStatusEmoji(lintStatus)} ${lintStatus} |
              | Type Check | ${getStatusEmoji(typecheckStatus)} ${typecheckStatus} |
              | Tests | ${getStatusEmoji(testStatus)} ${testStatus} |
              | Build | ${getStatusEmoji(buildStatus)} ${buildStatus} |
              
              [View full logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
              
              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body
                });
              }
            } catch (error) {
              console.log('Unable to comment on PR:', error.message);
              console.log('This might happen if the PR is from a fork or permissions are restricted.');
            }

      - name: Create job summary
        if: always()
        run: |
          echo "## 🧪 SDK Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.lint.outcome }}" == "success" && \
                "${{ steps.typecheck.outcome }}" == "success" && \
                "${{ steps.test.outcome }}" == "success" && \
                "${{ steps.build.outcome }}" == "success" ]]; then
            echo "✅ **All checks passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some checks failed**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.lint.outcome }}" == "success" ]]; then
            echo "| Linting | ✅ success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Linting | ❌ ${{ steps.lint.outcome }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ steps.typecheck.outcome }}" == "success" ]]; then
            echo "| Type Check | ✅ success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Type Check | ❌ ${{ steps.typecheck.outcome }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ steps.test.outcome }}" == "success" ]]; then
            echo "| Tests | ✅ success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Tests | ❌ ${{ steps.test.outcome }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ steps.build.outcome }}" == "success" ]]; then
            echo "| Build | ✅ success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Build | ❌ ${{ steps.build.outcome }} |" >> $GITHUB_STEP_SUMMARY
          fi